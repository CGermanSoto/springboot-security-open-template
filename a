// JwtServiceImpl.java - Add new method
@Override
public TokenValidationResult refreshExpiredToken(String jwt, Claims claims, String locale) {
    try {
        log.info("Refreshing expired token");
        // Delete old token
        this.jwtTokenService.deleteByToken(locale, jwt);
        
        // Generate new token with existing claims
        String newToken = buildToken(new TokenClaims(claims.getSubject(), claims));
        
        return new TokenValidationResult(newToken, true);
    } catch (Exception e) {
        log.error("Error refreshing token", e);
        throw new TokenExpiredException("token.refresh.failed", locale);
    }
}

@Override
public TokenValidationResult validateDeleteExpiredToken(String jwt, String locale) {
    try {
        Claims claims = extractAllClaims(jwt);
        boolean isExpired = claims.getExpiration().before(new Date());

        if (isExpired) {
            log.info("Token is expired, refreshing");
            return refreshExpiredToken(jwt, claims, locale);
        }

        return new TokenValidationResult(jwt, false);
    } catch (Exception e) {
        log.info("Token validation failed, deleting token");
        this.jwtTokenService.deleteByToken(locale, jwt);
        throw new TokenExpiredException("token.expired", locale);
    }
}

// IJwtService.java - Add new method
public interface IJwtService {
    // ... existing methods
    TokenValidationResult refreshExpiredToken(String jwt, Claims claims, String locale);
}